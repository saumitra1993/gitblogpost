It's perhaps hypocrisy of the highest degree to talk about the Git workflow without exposing the reader to how the article evolved, how it branched from something it was to what it finally came out to be.
You can see all versions of this article. 
You can just click on the commits I made while writing and see how the article evolved.

There was this particular comment on a blog I fail to recollect the name of, that got me thinking about Git in the first place. 

"Where's the iphone of version control systems?", asked the commenter. 

That's a very good question. Git to version control systems is not what iphone was to phones. Or is it? The answer lies in answering an even more fundamental question. 

Do people need an iphone of version control systems?

If the fate of Git lies only in the hands of programmers, probably not. If there is something for everyone in the Git workflow, then a big yes, mostly because necessity is the mother of invention.

Programmers love Git because they understand the architecture, the sheer elegance of it. To them, it is the iphone.

Designers think in terms of abstractions, some that Git does brilliantly, others that it fails to do. (Merge-conflicts etc.) Great design doesn't make its presence felt and stuff like that.

So is there something for everyone in the Git workflow?  

As Clay Shirky pointed out in his TED talk, the git ideology reflects democratic spirit. The idea that everybody has all of the resource at all times and yet can't misuse it, is indeed attractive. He goes on to explain how lawmakers can leverage the tool to make better laws together, how clones and pull requests can become the new superpower of general public.

If I were to start a company knowing the power of the Git workflow, I would put everything in repositories. I would probably make six repos- one for all the code, one for all the designs and graphics work, one for all the product related documentation, another for all the business related documentation, one for all the stats documents and the last for all of our discussions. 

How would that help me? Well, all I have to do when someone new joins in is add him/her as a collaborator and he would understand the company as much as I want him to. Hired a freelancer? Working remotely couldn't be easier. We could work offline with the tools we are most comfortable with and yet, stay in sync with everybody else.  All of our important discussions and stats will always be with everybody, tagged for when we tried out something new. Conceptually, our entire team would be able to "react" to a change and record it in the pages of our history.   

If you look around, there are many projects that are offbeat, trying to push change. There's a GitHub repo containing the entire German federal laws and regulations, many for collaboratively writing a book, for recipes, medical research, music and so on.

So now that we may agree that the Git workflow can help non programmers too, we ask ourselves, can Git pull it off? Can Git usher the world into a new era of collaboration? Like Clay Shirky described it, the era of collaboration without coordination. 

If yes, all we need to do is talk about git more, make more lessons to make it easy to learn and make it appear less scary to all the non programmers.

If not, then all of us have to go on a mission, a mission to reimagine the git workflow and come up with a tool that a designer could call the iphone of version control systems.

I will leave the question open to discussions before making any judgement. Do check out the commits of this article before forming an opinion though. Putting something, anything together is almost never a clean, linear process.


Sources - http://www.makeuseof.com/tag/just-coders-9-ways-use-github-creative-work/, http://blog.ted.com/further-reading-in-github/