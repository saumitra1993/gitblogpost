Are you a marketer? A programmer? A designer? A sales guy? Whoever you may be, this article is for you. Mostly because you are human. And the Git workflow is for humans. Let's not talk about the not-so-intuitive Git commands for now. There are many tools and resources to make that a cakewalk for you.

It's perhaps hypocrisy of the highest degree to talk about the Git workflow without exposing the reader to how the article evolved, how it branched from something it was to what it finally came out to be.

And if the goal of the article is to convince people to adopt the Git workflow for all data requirements of a general problem statement, be it code, text, excel sheets, images, word docs, whatever, I believe its almost a crime to not adopt the Git workflow for the article.
You can see all versions of this article. Right now, well, there aren't any, but there will be and when there are, you can just click on the commits I made while writing this article and see how it evolved to whatever it evolves to.

I have been reading up extensively about Git for almost two months now. I have elaborate notes from the ProGit book (which is amazing by the way) and I have gone through all the blogs I could find that talk about how awesome Git is and others that talk about what Git doesn't do well enough. 
That, I think is a matter of opinion. 
Programmers love Git because they understand the architecture, the sheer elegance of it. 
Designers think in terms of abstractions, some that Git does brilliantly, others that it fails at doing. (Merge-conflicts etc.)
So, instead of talking about Git, I will talk about the Git workflow, the ideology behind it, which I found no critics for.

The first part of what Git does is version control.
We, as humans, make mistakes. We don't always know what we are doing and so, we try a few things out, see the results and adjust ourselves accordingly. In Git terms, you try things out in "branches" and you remember what you are doing using a "commit".
The second part is that it is a distributed system.
It basically implies letting everybody see the bigger picture. As Clay Shirky pointed out in his TED talk, this ideology reflects democratic spirit. In Git terms, you "push" to share your changes with everybody else and you "pull" to accept others' changes, from a host all parties have access to.

When you put these two ideologies together, you get a potent way of working like a human, with humans. So, now let's take a real situation and see if the Git workflow can help us out.
