Are you a marketer? A programmer? A designer? A sales guy? Whoever you may be, this article is for you. Mostly because you are human. And the Git workflow is for humans. Let's not talk about the not-so-intuitive Git commands for now. There are many tools and resources to make that a cakewalk for you.

It's perhaps hypocrisy of the highest degree to talk about the Git workflow without exposing the reader to how the article evolved, how it branched from something it was to what it finally came out to be.

And if the goal of the article is to convince people to adopt the Git workflow for all data requirements of a general problem statement, be it code, text, excel sheets, images, word docs, whatever, I believe its almost a crime to not adopt the Git workflow for the article.
You can see all versions of this article. 
Right now, well, there aren't any, but there will be and when there are, you can just click on the commits I made while writing this article and see how it evolved to whatever it evolves to.

I have been reading up extensively about Git for almost two months now. I have elaborate notes from the ProGit book (which is amazing by the way) and I have gone through all the blogs I could find that talk about how awesome Git is and others that talk about what Git doesn't do well enough. 
That, I think is a matter of opinion. 
Programmers love Git because they understand the architecture, the sheer elegance of it. 
Designers think in terms of abstractions, some that Git does brilliantly, others that it fails to do. (Merge-conflicts etc.) Great design doesn't make its presence felt and stuff like that.

But, there was this particular comment, I fail to recollect the source of, that got me thinking more about Git. 

"Where's the iphone of version control systems?", asked the commenter. 

That's a very good question. Git to version control systems is not what iphone was to phones. Or is it? 
The answer lies in answering an even more fundamental question. 

Do people need an iphone of VCS?

If the fate of Git lies only in the hands of programmers, probably not. If there is something for everyone in the Git workflow, then a big yes. 

So now, I get to the point. Is there something for everyone in the Git workflow?  
